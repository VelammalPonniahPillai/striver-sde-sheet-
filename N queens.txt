class Solution {
    public List<List<String>> solveNQueens(int n) {
        List<List<String>>res=new ArrayList<>();
        char[][]board=new char[n][n];
        int[]leftrow=new int[n];
        int[]upperdiagonal=new int[2*n-1];
        int[]lowerdiagonal=new int[2*n-1];
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                board[i][j]='.';
            }
        }
        solve(0,board,leftrow,upperdiagonal,lowerdiagonal,res);
        return res;
    }
    public void solve(int col,char[][]board,int[]leftrow,int[]upperdiagonal,int[]lowerdiagonal,List<List<String>>res){
        if(col==board.length){
            res.add(construct(board));
            return;
        }
        for(int row=0;row<board.length;row++){
            if(leftrow[row]==0&&lowerdiagonal[row+col]==0&&upperdiagonal[board.length-1+col-row]==0){
                board[row][col]='Q';
                leftrow[row]=1;
                lowerdiagonal[row+col]=1;
                upperdiagonal[board.length-1+col-row]=1;
                solve(col+1,board,leftrow,upperdiagonal,lowerdiagonal,res);
                board[row][col]='.';
                leftrow[row]=0;
                lowerdiagonal[row+col]=0;
                upperdiagonal[board.length-1+col-row]=0;
            }
        }
    }
    static List<String>construct(char[][]board){//row by row execution of board
        List<String>res=new LinkedList<>();
        for(int i=0;i<board.length;i++){
            String s=new String(board[i]);
            res.add(s);
        }
        return res;
    }
}